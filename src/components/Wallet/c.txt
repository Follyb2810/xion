use cosmwasm_std::{
    entry_point, to_binary, Binary, Deps, DepsMut, Env, MessageInfo, Response, StdResult, WasmMsg,
};

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]
pub struct InstantiateMsg {
    pub target_contract: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]
#[serde(rename_all = "snake_case")]
pub enum ExecuteMsg {
    Forward { msg: Binary },
}

#[entry_point]
pub fn execute(
    deps: DepsMut,
    _env: Env,
    info: MessageInfo,
    msg: ExecuteMsg,
) -> StdResult<Response> {
    match msg {
        ExecuteMsg::Forward { msg } => {
            let target_contract: String = deps.storage.get(b"target_contract").unwrap().into();
            let execute_msg = WasmMsg::Execute {
                contract_addr: target_contract,
                msg,
                funds: info.funds,
            };

            Ok(Response::new().add_message(execute_msg))
        }
    }
}
